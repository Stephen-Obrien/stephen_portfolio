---
title: "lab3"
format: html
editor: visual
code-fold: true
smooth-scroll: true
execute:
  warning: false
theme: mint
---

```{r setup, include=FALSE}
library(tidyverse)
```

```{r load.data, include=FALSE}
hiphop <- read_csv(here::here("supporting_artifacts", "ref.work",
                              "lab3", "hiphop.csv"))

```

```{r intro, include = FALSE}
str(hiphop)
#this was used to observe the variable types but was not helpful to indlude in a report so include was set to false. 
```

## 1. Introduction:

The data set analyzed in today's lab is from a project that aimed to predict music taste based on how familiar a person is with 64 words from African American English. The data set was complied by asking participants to report their familiarity, on a scale from 1 to 6, for a set of 64 words.

## 2. what are the rows?

A row is created for each participant-word pairing.

## 3. What are missing values replaced with?

Missing values were replaced with mean values. This is a good idea because it prevents outlying variables from over influencing the distribution of the data set, but it is an assumption.

## 4. cleaning data

```{r clean_data}
hiphop_clean <- hiphop |> 
  mutate(
    across(where(is.character), as.factor)
    ) 
```

## 5. how many unique AAE words are there.

```{r unique_words}
hiphop_clean |> 
  distinct(word, .keep_all = TRUE) |> 
  count()
```

## 6. white and non-white factor.

```{r white_variable}
hiphop_w <- hiphop_clean |> 
  mutate(
    white = if_else(ethnic == "white", "white", "not white")
  )

```

## 7. Demographics

To investigate the demographics of the participants I created a summary for all of the data relevant to demographics (sex, age, and ethnic). I also counted the total number of unique combinations of sex, age, and ethnicity by using the n(row) function to get 47. I did not use the count function because I did not want the mutate argument build in to the code.

```{r demo}
demo <- hiphop_clean |> 
  distinct(subj, .keep_all = TRUE) |> 
  select(sex, age, ethnic)|> 
  mutate(sex = as.factor(sex),
         ethnic = as.factor(ethnic)) |> 
  select(sex, age, ethnic)
demo |> 
  summary()
 
demo <- demo |> 
  distinct(sex, age, ethnic, .keep_all = TRUE)
  
demo |> 
  count()
```

## 8.

### Demographic Plots

```{r demographic_plots}
#|plot_position: center
ggplot(data = demo) +
  geom_bar(
    mapping = aes(x = age, fill = sex),
    show.legend = FALSE
    ) +
  facet_wrap(~sex, nrow = 2) +
  ylab("Frequency")
            
ggplot(data = hiphop_w) +
  geom_bar(mapping = aes(x = white, 
                         fill = sex),
           show.legend = FALSE) +
  facet_wrap(~sex, nrow = 2)+
  ylab("Frequency")
```

### Familiar words

```{r familiar, include=FALSE}

familiar <- hiphop_clean |> 
  filter(age < 20) |> 
  select(word,familiarity) |> 
  group_by(word) |> 
  summarise(mean_fam = mean(familiarity))
familiar |> 
  slice_max(mean_fam)

familiar |> 
  slice_min(mean_fam)

familiar <- hiphop_w |> 
 filter(white == "not white",
        sex == "Female") |> 
 select(word, familiarity) |> 
 group_by(word) |> 
 summarise(mean_fam = mean(familiarity))

familiar |> 
 slice_max(mean_fam) |> 
  print()
familiar |> 
 slice_min(mean_fam)
 
familiar <- hiphop_w |> 
 filter(white == "white",
        age > 30,
        sex == "Male") |> 
 select(word, familiarity) |> 
 group_by(word) |> 
   summarise(mean_fam = mean(familiarity))

familiar |> 
   slice_max(mean_fam)
  
familiar |> 
   slice_min(mean_fam)
```

-   People under 20 were most familiar with "off the hook" and least familiar with "catch the vapors".

-   non-white women were most familiar with "feel me" and least familiar with "The Nation", "dukey rope", "plex", and "rollie".

-   white men over 30 were least familiar with "feel me" and least familiar with a list of 25 words including "breezy", "break someone out", "catch the vapors" and 22 other words.

## Justin Bieber?

```{r justin}
hiphop_clean |> 
  distinct(subj, .keep_all = TRUE) |> 
  filter(age %in% 17:23,
         city %in% 10000:60000,
         sex == "Male",
         ethnic == "white") |> 
  slice_max(order_by = bieber, n = 1) |> 
  select(subj)

```

If Justin was in this study he would be participant #17.
